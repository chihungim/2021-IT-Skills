package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;

public class BasePage extends JPanel {
	JPanel c, w, e, n, s;
	public static MainFrame mf = new MainFrame();
	static int uno, sno, s_addr, u_addr;

	static Connection con = db.DB.con;
	static Statement stmt = db.DB.stmt;
	static {
		try {
			stmt.execute("use Delivery");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	static String uname, sname, pname;
	static LocalDate startTime;

	public static void execute(String sql) {
		try {
			stmt.execute(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static String getOne(String sql) {
		try {
			var rs = stmt.executeQuery(sql);
			if (rs.next()) {
				return rs.getString(1);
			}
		} catch (SQLException e) {
			return null;
		}
		return "";
	}

	public static ResultSet rs(String sql) throws SQLException {
		var rs = stmt.executeQuery(sql);
		return rs;
	}

	public static JComponent setBorder(JComponent jc, Border b) {
		jc.setBorder(b);
		return jc;
	}

	public static JButton btn(String cap, ActionListener a) {
		var btn = new JButton(cap);
		btn.addActionListener(a);
		return btn;
	}

	public static JLabel lbl(String cap, int al) {
		return new JLabel(cap, al);
	}

	public static JLabel lbl(String cap, int al, int s) {
		var lbl = new JLabel(cap, al);
		lbl.setFont(new Font("", Font.BOLD, s));
		return lbl;
	}

	public static ImageIcon getImage(String path, int w, int h) {
		return new ImageIcon(Toolkit.getDefaultToolkit().getImage(path).getScaledInstance(w, h, Image.SCALE_SMOOTH));
	}

	public static ImageIcon getImage(String path) {
		return new ImageIcon(Toolkit.getDefaultToolkit().getImage(path));
	}

	public static Integer toInt(Object obj) {
		return Integer.parseInt(obj.toString());
	}

	public BasePage() {
		setLayout(new BorderLayout());
		setBackground(Color.WHITE);
	}

	class JPanel extends javax.swing.JPanel {
		public JPanel() {
			super(new FlowLayout(FlowLayout.LEFT, 5, 5));
			setOpaque(false);
		}

		public JPanel(LayoutManager l) {
			super(l);
			setOpaque(false);
		}
	}
}
