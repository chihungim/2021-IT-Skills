package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.sql.SQLException;
import java.util.HashSet;

import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;

public class SearchPage extends BasePage {
	JScrollPane scr1, scr2;
	JScrollPane scr;
	JPanel scr_p = new JPanel(), orderPanel;
	JTextField txt;
	JCheckBox evntChk = new JCheckBox();
	JComboBox<String> c_combo = new JComboBox<>(), s_combo = new JComboBox<>();
	String cap[] = "영업점명,카테고리,행사 여부".split(",");
	HashSet<Integer> idSet = new HashSet<>();
	int cnt;

	public SearchPage() {
		ui();
	}

	void ui() {
		add(n = new JPanel(new GridLayout(0, 1, 0, 0)), "North");
		var n_f = new JPanel(new BorderLayout());
		n_f.add(txt = new JTextField());
		n_f.add(sz(btn("<html>$#x1F50D", a -> {
			cnt = 0;
			scr.getVerticalScrollBar().setValue(0);
			search();
			c.removeAll();
		}), 40, 1), "East");

		n.add(sz(n_f, 40, 1));
		var n_l = new JPanel(new GridLayout(1, 0, 5, 5));
		n.add(n_l);
		c_combo.setBackground(Color.WHITE);
		s_combo.setBackground(Color.WHITE);

		for (int i = 0; i < cap.length; i++) {
			var tmp = new JPanel();
			tmp.add(sz(new JLabel(cap[i]), 60, 25));
			if (i == 0) {
				tmp.add(s_combo);
			} else if (i == 1) {
				tmp.add(c_combo);
			} else {
				tmp.add(evntChk);
				evntChk.setOpaque(false);
			}
			tmp.setOpaque(false);
			n_l.add(tmp);
		}

		add(scr = scr1 = new JScrollPane(c = new JPanel(new GridLayout(0, 3, 5, 5))));
		add(scr_p = new JPanel(new BorderLayout()), "East");
		scr_p.add(lbl("장바구니", 0, 20), "North");
		scr_p.add(scr2 = new JScrollPane(orderPanel = new JPanel(new FlowLayout(0))));
		scr_p.add(sz(btn("구매하기", a -> {
			if (idSet.size() == 0) {
				eMsg("장바구니가 비어있습니다.");
				return;
			}
		}), 1, 25));

		sz(scr2, 230, 25);
		setBorder(scr2, new EmptyBorder(0, 10, 0, 0));
		scr1.setOpaque(false);
		scr2.setOpaque(false);
		setBorder(scr1, new LineBorder(Color.BLACK));
		setBorder(scr2, new LineBorder(Color.BLACK));

		c.setOpaque(true);
		c.setBackground(Color.WHITE);

		setBorder(this, new EmptyBorder(5, 5, 5, 5));

		c_combo.addItem("전체");

		try {
			var rs = rs("select c_Name from category");
			while (rs.next()) {
				c_combo.addItem(rs.getString(1));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			var rs = rs("select s_Name from seller");
			while (rs.next()) {
				s_combo.addItem(rs.getString(1));
				;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		c.removeAll();
		var scroll = scr.getVerticalScrollBar();
		scroll.addAdjustmentListener(new AdjustmentListener() {

			@Override
			public void adjustmentValueChanged(AdjustmentEvent e) {
				if (scroll.getValue() != 0 && (scroll.getValue() + scroll.getHeight() == scroll.getMaximum())) {
					cnt += 9;
					search();
				}
			}
		});
	}

	void search() {

	}
}
