package view;

import java.awt.AlphaComposite;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;

public class LocationInfo extends BaseFrame {
	String floor[] = "1F,2F,3F,4F,외부".split(",");
	String character[] = "로리,로티".split(",");
	JLabel f_img[] = new JLabel[floor.length];
	JLabel ch_img;
	JTabbedPane tab = new JTabbedPane(JTabbedPane.LEFT);
	JComboBox<String> combo = new JComboBox<>();
	HashMap<String, ArrayList<String>> ride = new HashMap<String, ArrayList<String>>();
	Random r = new Random();
	int point[][][];
	IconLabel iconlbl[][];

	public LocationInfo() {
		super("위치정보", 1250, 650);
		ui();
		events();
		setVisible(true);
	}

	void ui() {
		var c = new JPanel(new BorderLayout());
		var e = new JPanel(new BorderLayout());
		add(c);
		add(e, "East");
		e.add(combo, "North");
		e.add(ch_img = new JLabel(
				img("./datafiles/캐릭터/" + character[r.nextInt(2)] + (r.nextInt(3) + 1) + ".jpg", 200, 200)), "South");

		c.add(tab);

		for (int i = 0; i < floor.length; i++) {
			int j = i;

			f_img[i] = new JLabel() {
				@Override
				public void paint(Graphics g) {
					super.paint(g);
					Graphics2D g2 = (Graphics2D) g;
					Image img = new ImageIcon(
							Toolkit.getDefaultToolkit().getImage("./datafiles/지도/" + floor[j] + ".jpg")).getImage();

					g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.2f));
					g2.drawImage(img, 0, 0, 950, 600, null);
				}
			};
			f_img[i].setLayout(null);
			tab.add(floor[i], f_img[i]);
			f_img[i].setOpaque(true);
		}

		tab.setOpaque(false);
	}

	void data() {
		point = new int[floor.length][][];
		iconlbl = new IconLabel[floor.length][];

		for (int i = 0; i < floor.length; i++) {
			ride.put(floor[i], new ArrayList<String>());
		}

		try {
			var rs = stmt.executeQuery("select * from ride");
			while (rs.next()) {
				ride.get(rs.getString(3)).add(rs.getString(2));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		for (int i = 0; i < floor.length; i++) {
			point[i] = new int[ride.get(floor[i]).size()][2];
			try {
				var rs = stmt.executeQuery("select r_explation from ride where r_floor = '" + floor[i] + "'");
				int idx = 0;
				while (rs.next()) {
					point[i][idx][0] = val(rs.getString(1).split("#")[1]);
					point[i][idx][1] = val(rs.getString(1).split("#")[2]);
					idx++;
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		for (int i = 0; i < point.length; i++) {

		}
	}

	void events() {

	}

	public static void main(String[] args) {
		new LocationInfo();
	}
}
