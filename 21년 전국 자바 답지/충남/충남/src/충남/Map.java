package 충남;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;

public class Map extends BaseFrame {
	Image img = img("metro.png").getImage();
	ArrayList<Integer> cpath;
//	ArrayList<String> list = new ArrayList<String>();
	JLabel path, cost, limg;
	JScrollPane scr;
//	int x,y, px, py;
	
//	int n[][] = {/*1호선*/{0,0}, {1111,81}, {1194,81}, {1269,81}, {1357,82}, {1445,82}, {1508,82}, {1571,82}, {1634,81}, {1697,80}, {1761,82}, {1842,81}, {1892,132}, {1956,192}, {1958,231}, {1957,259}, {1956,291}, {1956,324}, {1957,358}, {1955,390}, {1955,420}, {1955,477}, {1955,515}, {1956,545}, {1882,546}, {1817,546}, {1765,546}, {1683,547}, {1559,547}, {1429,545}, {1311,641}, {1312,827}, {1310,903}, {1311,1081}, {1216,1083}, {1185,1083}, {1140,1081}, {990,1083}, {828,1085}, {771,1083}, {711,1082}, {644,1082}, {585,1082}, {539,1082}, {464,1082}, {432,1053}, {399,1022}, {368,991}, {340,962}, {321,944}, {274,943}, {219,944}, {170,944}, {118,945}, {116,998}, {116,1036}, {116,1074}, {116,1112}, {118,1150}, {828,1163}, {828,1250}, {828,1294}, {772,1293}, {826,1337}, {829,1403}, {844,1424}, {873,1453}, {910,1494}, {910,1535}, {909,1598}, {910,1661}, {909,1724}, {909,1788}, {909,1845}, {986,1844}, {1069,1845}, {1129,1783}, {1145,1844}, {1226,1844}, {1310,1843}, {1388,1843}, {1464,1844}, {1542,1844}, {1616,1844}, {1686,1845}, {1759,1843}, {1834,1845}, {1906,1843}, {1978,1844}, {2051,1843}, {2150,1843}, {2259,1844}, {2404,1844}, {2506,1842}, {2508,1725},
//			/*2호선*/{683,962}, {686,1010}, {814,1011}, {917,1011}, {990,1084}, {990,1163}, {990,1234}, {990,1319}, {1074,1319}, {1137,1320}, {1221,1319}, {1312,1320}, {1402,1319}, {1453,1320}, {1497,1319}, {1541,1320}, {1651,1320}, {1695,1319}, {1740,1319}, {1807,1259}, {1874,1193}, {1915,1153}, {1915,1077}, {1916,1005}, {1914,942}, {1914,908}, {1912,869}, {1915,822}, {1884,792}, {1860,768}, {1823,727}, {1730,643}, {1684,641}, {1559,640}, {1515,638}, {1430,639}, {1370,642}, {1313,641}, {1223,639}, {1173,687}, {1127,733}, {1082,772}, {1039,813}, {992,857}, {990,905}, {989,964}, {990,1013}, {1916,783}, {1914,699}, {1819,600},
//			/*3호선*/{300,371}, {357,370}, {423,371}, {488,371}, {545,371}, {628,369}, {676,371}, {724,371}, {773,371}, {822,371}, {872,372}, {927,371}, {1031,369}, {1107,369}, {1200,370}, {1258,370}, {1324,370}, {1428,370}, {1430,419}, {1430,475}, {1429,546}, {1481,729}, {1539,787}, {1583,828}, {1619,867}, {1621,932}, {1618,1054}, {1593,1083}, {1539,1139}, {1540,1239}, {1543,1395}, {1650,1395}, {1695,1396}, {1739,1395}, {1779,1358}, {1813,1326}, {1887,1323}, {1932,1324}, {1974,1323}, {1974,1215}, {2104,1213}, {2219,1213},
//			/*4호선*/{266,1666}, {326,1666}, {393,1667}, {459,1667}, {513,1667}, {588,1665}, {629,1628}, {662,1596}, {687,1570}, {720,1536}, {744,1511}, {766,1492}, {839,1490}, {979,1491}, {1027,1491}, {1082,1492}, {1163,1490}, {1241,1491}, {1293,1490}, {1400,1490}, {1402,1429}, {1403,1387}, {1403,1241}, {1403,1164}, {1403,1083}, {1403,1007}, {1401,920}, {1369,885}, {1357,782}, {1411,729}, {1559,480}, {1559,422}, {1560,366}, {1560,292}, {1676,287}, {1753,289}, {1811,289}, {1870,288}, {2074,287}, {2169,289}, {2249,289},
//			/*5호선*/{527,557}, {571,602}, {625,654}, {681,715}, {683,772}, {682,816}, {682,863}, {682,906}, {779,964}, {830,964}, {889,964}, {950,965}, {1061,1021}, {1140,983}, {1142,923}, {1142,872}, {1224,782}, {1225,705}, {1226,486}, {1366,484}, {1611,727}, {1666,727}, {1749,727}, {1973,728}, {2008,762}, {2043,797}, {2072,829}, {2072,881}, {2073,942}, {2076,1013}, {2219,1016}, {2217,974}, {2218,933}, {2218,893}, {2217,853}, {2219,815}, {2217,776}, {2220,739}, {2327,739}, {2328,775}, {2328,816}, {2217,1054}, {2217,1085}, {2219,1152}, {2220,1292}, {2234,1312}, {2271,1348}
//	};
	int n[][] = { { 0, 0 }, { 1110, 83 }, { 1192, 82 }, { 1270, 82 }, { 1359, 81 }, { 1444, 80 }, { 1507, 82 },
			{ 1569, 80 }, { 1636, 83 }, { 1698, 80 }, { 1763, 83 }, { 1843, 82 }, { 1891, 130 }, { 1919, 159 },
			{ 1956, 192 }, { 1954, 229 }, { 1955, 254 }, { 1955, 288 }, { 1956, 321 }, { 1954, 357 }, { 1954, 391 },
			{ 1953, 417 }, { 1955, 478 }, { 1956, 514 }, { 1955, 543 }, { 1880, 543 }, { 1818, 546 }, { 1767, 546 },
			{ 1683, 547 }, { 1559, 545 }, { 1478, 546 }, { 1429, 546 }, { 1313, 549 }, { 1312, 640 }, { 1311, 826 },
			{ 1309, 898 }, { 1309, 1081 }, { 1218, 1080 }, { 1187, 1083 }, { 1140, 1080 }, { 1060, 1082 },
			{ 988, 1083 }, { 825, 1083 }, { 776, 1082 }, { 710, 1082 }, { 647, 1079 }, { 586, 1080 }, { 542, 1082 },
			{ 462, 1081 }, { 429, 1053 }, { 398, 1021 }, { 366, 989 }, { 341, 965 }, { 321, 942 }, { 273, 940 },
			{ 222, 944 }, { 172, 942 }, { 117, 946 }, { 115, 995 }, { 113, 1036 }, { 115, 1073 }, { 117, 1108 },
			{ 116, 1152 }, { 823, 1160 }, { 828, 1250 }, { 826, 1295 }, { 770, 1295 }, { 828, 1337 }, { 826, 1398 },
			{ 840, 1423 }, { 871, 1449 }, { 908, 1488 }, { 910, 1536 }, { 912, 1598 }, { 911, 1663 }, { 911, 1722 },
			{ 910, 1787 }, { 907, 1845 }, { 987, 1842 }, { 1066, 1846 }, { 1130, 1779 }, { 1144, 1843 }, { 1227, 1846 },
			{ 1311, 1844 }, { 1388, 1843 }, { 1462, 1842 }, { 1545, 1842 }, { 1617, 1845 }, { 1686, 1844 },
			{ 1763, 1844 }, { 1832, 1843 }, { 1904, 1841 }, { 1978, 1842 }, { 2051, 1846 }, { 2152, 1845 },
			{ 2260, 1845 }, { 2404, 1844 }, { 2504, 1844 }, { 2509, 1725 },/*2호선*/ { 683, 960 }, { 685, 1008 }, { 810, 1011 },
			{ 918, 1011 }, { 988, 1164 }, { 991, 1234 }, { 994, 1312 }, { 1070, 1318 }, { 1136, 1320 }, { 1223, 1317 },
			{ 1311, 1320 }, { 1405, 1320 }, { 1450, 1320 }, { 1498, 1318 }, { 1540, 1317 }, { 1651, 1317 },
			{ 1696, 1319 }, { 1735, 1319 }, { 1804, 1258 }, { 1875, 1192 }, { 1916, 1151 }, { 1915, 1077 },
			{ 1916, 1000 }, { 1917, 940 }, { 1918, 903 }, { 1917, 864 }, { 1913, 818 }, { 1881, 788 }, { 1861, 763 },
			{ 1824, 727 }, { 1733, 641 }, { 1685, 639 }, { 1558, 636 }, { 1513, 637 }, { 1429, 637 }, { 1368, 640 },
			{ 1226, 640 }, { 1172, 685 }, { 1130, 729 }, { 1084, 774 }, { 1036, 810 }, { 990, 856 }, { 991, 903 },
			{ 987, 961 }, { 990, 1013 }, { 1917, 780 }, { 1914, 699 }, { 1818, 600 },/*3호선*/ { 298, 367 }, { 359, 368 },
			{ 422, 368 }, { 485, 369 }, { 543, 370 }, { 628, 367 }, { 676, 368 }, { 723, 368 }, { 771, 366 },
			{ 820, 367 }, { 870, 367 }, { 923, 367 }, { 1031, 366 }, { 1108, 365 }, { 1203, 369 }, { 1255, 366 },
			{ 1320, 366 }, { 1425, 373 }, { 1430, 421 }, { 1433, 476 }, { 1483, 728 }, { 1542, 785 }, { 1582, 827 },
			{ 1623, 865 }, { 1620, 930 }, { 1620, 1056 }, { 1591, 1083 }, { 1540, 1138 }, { 1539, 1237 },
			{ 1543, 1392 }, { 1652, 1392 }, { 1700, 1397 }, { 1736, 1394 }, { 1782, 1357 }, { 1812, 1325 },
			{ 1883, 1320 }, { 1930, 1322 }, { 1971, 1322 }, { 1970, 1213 }, { 2103, 1213 }, { 2218, 1217 },
			/*4호선*/{ 263, 1667 }, { 331, 1667 }, { 394, 1668 }, { 457, 1665 }, { 512, 1663 }, { 585, 1665 }, { 624, 1629 },
			{ 665, 1593 }, { 685, 1570 }, { 718, 1537 }, { 742, 1514 }, { 766, 1490 }, { 837, 1488 }, { 978, 1486 },
			{ 1029, 1490 }, { 1080, 1489 }, { 1165, 1488 }, { 1243, 1492 }, { 1293, 1490 }, { 1402, 1491 },
			{ 1402, 1430 }, { 1404, 1384 }, { 1402, 1238 }, { 1402, 1165 }, { 1401, 1080 }, { 1405, 1006 },
			{ 1400, 920 }, { 1371, 882 }, { 1358, 779 }, { 1410, 729 }, { 1558, 482 }, { 1556, 425 }, { 1557, 367 },
			{ 1557, 292 }, { 1674, 287 }, { 1756, 286 }, { 1814, 284 }, { 1875, 289 }, { 2068, 290 }, { 2173, 291 },
			{ 2251, 289 },/*5호선*/ { 527, 556 }, { 572, 599 }, { 623, 652 }, { 678, 712 }, { 683, 767 }, { 681, 815 },
			{ 681, 858 }, { 682, 900 }, { 778, 965 }, { 834, 966 }, { 893, 966 }, { 947, 965 }, { 1060, 1018 },
			{ 1143, 982 }, { 1139, 924 }, { 1138, 869 }, { 1220, 781 }, { 1227, 705 }, { 1227, 485 }, { 1367, 481 },
			{ 1610, 725 }, { 1662, 726 }, { 1749, 729 }, { 1970, 727 }, { 2007, 760 }, { 2043, 797 }, { 2072, 829 },
			{ 2072, 879 }, { 2072, 943 }, { 2076, 1014 }, { 2218, 1013 }, { 2220, 970 }, { 2217, 930 }, { 2219, 894 },
			{ 2216, 851 }, { 2217, 813 }, { 2217, 773 }, { 2220, 736 }, { 2329, 736 }, { 2328, 775 }, { 2328, 815 },
			{ 2217, 1049 }, { 2220, 1086 }, { 2217, 1151 }, { 2217, 1290 }, { 2235, 1313 }, { 2269, 1349 } };
	JLabel jl[] = new JLabel[n.length];
	JPopupMenu pop = new JPopupMenu();
	JMenuItem item[] = {
			new JMenuItem("출발으로 설정"),
			new JMenuItem("도착으로 설정"),
			new JMenuItem("해당 역 정보 보기"),
	};
	int dep, arv;
	int p[][];
	
	public Map() {
		super("지도", 1600, 900);
		
		try {
			data();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		add(c = new JPanel(new BorderLayout()));
		add(s = new JPanel(new GridLayout()),"South");
		
		c.add(scr = new JScrollPane(limg = new JLabel(new ImageIcon(img)) {
			@Override
			protected void paintComponent(Graphics g) {
				super.paintComponent(g);
				Graphics2D g2 = (Graphics2D) g;
				g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
				
				for(int i=1; i<=275; i++) {
					for(int j=i+1; j<=275; j++) {
						if(adj[i][j]!=0 && adj[i][j]!=INF) {
							int x1 = n[i][0], x2 = n[j][0];
							int y1 = n[i][1], y2 = n[j][1];
							
							g2.setColor(Color.RED);
							g2.drawString(adj[i][j]/5+"", (x1+x2)/2 - 5, ((y1+y2)/2)+5);
						}
					}
				}
				setOpaque(false);
			}
		}));
		
		s.add(btn("결정", a->{
			new Reserv(cpath).addWindowListener(new be(this));
		}));
		
		for (int i = 0; i < item.length; i++) {
			pop.add(item[i]);
			item[i].addActionListener(a->{
				if(a.getSource().equals(item[0])) {
					dep = sno;
					msg("출발역을 "+stNames.get(dep)+"으로 설정하였습니다.");
					if(arv != 0 && dep != 0) {
						dijkstra();
						showPath(arv);
					}
				}
				if(a.getSource().equals(item[1])) {
					arv = sno;
					msg("도착역을 "+stNames.get(arv)+"으로 설정하였습니다.");
					if(arv != 0 && dep != 0) {
						dijkstra();
						showPath(arv);
					}
				}
				if(a.getSource().equals(item[2])) {
					new Station(toint(pop.getName())).addWindowListener(new be(this));
				}
			});
		}
		
		for (int i = 0; i < jl.length; i++) {
			limg.add(jl[i] = new JLabel());
			jl[i].setBounds(n[i][0] - 10, n[i][1] - 10, 20, 20);
			int k = i;
			jl[i].addMouseListener(new MouseAdapter() {
				@Override
				public void mouseClicked(MouseEvent e) {
					if(e.getButton() == 3) {
						pop.setName(k+"");
						sno = k;
						Point p = getMousePosition();
						pop.show(Map.this, p.x, p.y);
					}
				}
			});
		}
		
		setVisible(true);
	}
	
	private void showPath(int idx) {
		cpath = new ArrayList<Integer>();
		
		cpath.add(idx);

		while (p[3][idx] != -1) {
			cpath.add(p[3][idx]);
			idx = p[3][idx];
		}
		
		Collections.reverse(cpath);
		
		dep = 0;
		arv = 0;
		
		try {
			limg.remove(path);
		} catch (Exception e) {
		}
		
		limg.add(path = new JLabel() {
			@Override
			protected void paintComponent(Graphics g) {
				super.paintComponent(g);
				Graphics2D g2 = (Graphics2D)g;
				g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
				
				int xx[] = new int[cpath.size()], yy[] = new int[cpath.size()];
				
				for (int i = 0; i < cpath.size(); i++) {
					xx[i] = n[cpath.get(i)][0];
					yy[i] = n[cpath.get(i)][1];
				}
				g2.setColor(Color.WHITE);
				g2.setStroke(new BasicStroke(4));
				g2.drawPolyline(xx, yy, xx.length);
				setOpaque(false);
			}
		});
		
		path.setBounds(0, 0, img.getWidth(null), img.getHeight(null));
		repaint();
		revalidate();
	}

	private void dijkstra() {
		p = new int[4][n.length];
		for (int i = 0; i < n.length; i++) {
			p[1][i] = adj[dep][i];
			p[2][i] = 0;
			if(adj[i][dep] < INF) p[3][i] = dep;
		}
		
		p[2][dep] = 1;
		p[3][dep] = -1;
		
		for (int i = 1; i < n.length - 1; i++) {
			int min =2147483647, idx = 0;
			for (int j = 1; j < n.length; j++) {
				if(p[2][j]==0 && p[1][j] < min) {
					min = p[1][j];
					idx = j;
				}
			}
			p[2][idx] = 1;
			int from = idx;
			for (int to = 0; to < adj.length; to++) {
				if(p[2][to] == 0 && p[1][to] > adj[from][to] + p[1][from]) {
					p[1][to] = adj[from][to] + p[1][from];
					p[3][to] = from;
				}
			}
		}
		
		
		
	}

	public static void main(String[] args) {
		NO = 1;
		new Map();
	}

}
